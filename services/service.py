from abc import abstractmethod, ABCMeta


class Service(metaclass=ABCMeta):
    '''
    A service is a way to save a song. For example, adding a track
    to a playlist, downloading a file, or opening a web browser to a
    purchase URL.
    
    Services are required to implement the methods `save` and `search`,
    detailed below.
    '''
    name = "Service"
    
    @abstractmethod
    def __init__(self, config):
        '''
        Services' constructors will be passed their section of the
        configuration file. This is where credentials, api keys, playlist
        identifiers, folder paths, and so on can be stored.
        
        The `config` param functions like a dictionary.
        The keys are up to the service implementation.
        
        This method should raise an exception if the service's server cannot
        be reached or if authentication fails.
        '''
        pass
        
    @abstractmethod
    def search(self, track):
        '''
        Search the service for a track, returning a list of candidates.
        Return an empty list if none were found.
        
        @param track A pylast track object
        @return A list of ServiceTrack objects available from this service
        '''
    
    @abstractmethod
    def save(self, servicetrack):
        '''
        Attempt to save a track. If saving is successful, no other services
        will be attempted.
        
        @param track A ServiceTrack, generated by search()
        @return (success, message)
            success: True iff saving was successful
            message: str describing what went right or wrong
                "Saved to dir/file.mp3"
                "Added to playlist 'New Music'"
                "Spotify add returned status 500"
        '''
        pass